#!/bin/bash

FIFO_QUEUE="/tmp/inotifywait.log"
INOTIFYWAIT=`which inotifywait`
EVENTS="move,create,delete,delete_self,unmount,modify"
MAX_WATCHES=`cat /proc/sys/fs/inotify/max_user_watches`
LIBS_DIR="libs"
RUN_INOTIFYWAIT=true
INOTIFY_OPTS=("--daemon" "--recursive" "--quiet" "--timefmt %H%M%S" "--format %w,%f,%e,%T" "-o $FIFO_QUEUE")
INOTIFY_PID=

# Set script directory
DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
LIBS_DIR="$DIR/libs"

### Load external libraries ##
source "$LIBS_DIR/task-logger/task-logger.sh"
if [ $? -ne 0 ]; then
  error "can't find task-logger.sh in $LIBS_DIR/task-logger"
  exit 127 
fi

source "$LIBS_DIR/redis-bash/redis-bash-lib"
if [ $? -ne 0 ]; then
  error "can't find redis-bash-lib in $LIBS_DIR/redis-bash"
  exit 127 
fi

# Read the config file (if it exists)
if [ -f "$DIR/config" ]; then
  source "$DIR/config" 2> /dev/null
fi

# Read command line Options
while getopts ":h:p:r:c:" opt
do
    case ${opt} in
        h) REDISHOST=${OPTARG};;
        p) REDISPORT=${OPTARG};;
    esac
done
shift $((${OPTIND} - 1))

# Check if a value exists in an array
# @param $1 mixed  Needle  
# @param $2 array  Haystack
# @return  Success (0) if value exists, Failure (1) otherwise
# Usage: in_array "$needle" "${haystack[@]}"
# See: http://fvue.nl/wiki/Bash:_Check_if_array_element_exists
function in_array() {
    local hay needle=$1
    shift
    for hay; do
        [[ $hay == $needle ]] && return 0
    done
    return 1
}

function indexOf()    {
    local i=1 S=$1; shift
    while [ $S != $1 ]
    do    ((i++)); shift
        [ -z "$1" ] && { i=0; break; }
    done
    echo $i
}

function ctrl_c () {
  finish
  exit_handler
}

function exit_handler () {
  if [ -p "$FIFO_QUEUE" ]; then
    rm "$FIFO_QUEUE"
  fi
  if [ "$INOTIFY_PID" != "" -a $(ps -p $INOTIFY_PID > /dev/null; echo $?) -gt 0 ]; then
    kill -9 $INOTIFY_PID
  fi
}

function check_dependencies () {
  if [ $INOTIFYWAIT == "" ]; then
    error "inotifywait is not installed, it is required"
    info "Install it using the following:"
    info "  apt-get inotify-tools"
    exit 1
  fi
}

# Array Helper
function containsElement () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

function create_fifo_queue () {
  # Create named pipe (if not exists)
  if [ ! -p "$FIFO_QUEUE"  -a  ! -f "$FIFO_QUEUE" ]; then 
    mkfifo "$FIFO_QUEUE"
    return $?
  fi
  return 0
}

function open_redis_connection () {
  # Open the connection
  exec 5>&-
  if [ "${REDISHOST}" != "" ] && [ "${REDISPORT}" != "" ]; then
    exec 5<>/dev/tcp/${REDISHOST}/${REDISPORT} # open fd
    if [ $? -ne 0 ]; then
      error "Invalid Redis Connection Info $REDISHOST:$REDISPORT"
      bad $RESULT
      exit 255
    fi
  else
    error "Invalid Redis Connection Info $REDISHOST:$REDISPORT"
    exit 255
  fi
  return $?
}

function check_watch_dirs () {
  for watchdir in "${WATCH_DIRS[@]}"
  do
   :
   if [[ ! -d "$watchdir" ]]; then
	error "Watch dir doesn't exist! $watchdir"
	exit 1
   fi
  done
}

function start_inotifywait () {  
  if [ $RUN_INOTIFYWAIT ]; then
    #info "${INOTIFY_OPTS[@]} -e $EVENTS ${WATCH_DIRS[@]}"
    "$INOTIFYWAIT" ${INOTIFY_OPTS[@]} -e $EVENTS ${WATCH_DIRS[@]}
    if [ $? -ne 0 ]; then
      error "inotify failed to start!"
      bad "$OUTPUT"
      exit 1
    fi
    INOTIFY_PID=`ps -ax | grep "$INOTIFYWAIT" | grep -v grep | head -n 1 | awk '{print $1}'`
  fi
  return 0
}

## Start main app here
trap exit_handler EXIT
trap ctrl_c INT
check_dependencies
check_watch_dirs
create_fifo_queue
open_redis_connection
start_inotifywait

if [ `ps -ax | grep "$INOTIFYWAIT" | grep -v grep | head -n 1 | awk '{print $1}'` = "" ]; then
  error "inotifywait is not running!"
  exit 1
fi

good "Ready to receive file events"

last_tm=""
trap "true" PIPE

cat "$FIFO_QUEUE" | while IFS=, read -r path file event time; do
  echo "hello"
  # First we need to get the index of this path
  index=-1
  for watchdir in "${WATCH_DIRS[@]}"
  do
   :
   if [[ $path == *"$watchdir"* ]]; then
     echo "$"
     break
   fi
   (( index++ ))
   # do whatever on $i
  done

  if [ $index -eq -1 ] || [ $index -ge ${#CHANNELS[@]} ] || [ "${CHANNELS[$index]}" = ""  ]; then
    bad "Could not find channel for path!"
    continue
  else
    CHANNEL="${CHANNELS[$index]}"
    SUBSCRIBER_COUNT=`redis-client 5 PUBLISH "$CHANNEL" "$path,$file,$event"`
    CODE=$? 
    if [ $CODE -eq 0 ]; then
      info "Published $event for $file"
    else
      bad "Failed to publish $event for $file error $CODE"
    fi
  fi
done
  #if [[ "$tm" == "$last_tm" ]]; then
  #  continue
  #fi
  #last_tm=$tm
  #current=$(date +'%H%M%S')
  #echo "$file" "$path" "$event" "$tm"
  #delta=`expr $current - $tm`
  #if [ $delta -lt 2 -a $delta -gt -2 ]; then
  #  sleep 2
  #  info ${file} ${event} ${tm}
  #fi
#done
trap PIPE

exec 6>&- # close the connection
